/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * LangApp.Api
 * OpenAPI spec version: 1.0
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  Login,
  Refresh,
  Register,
  RequestPasswordReset,
  ResetPassword,
  TokenResponse,
} from './langAppApi.schemas';

import { mainApiMutator } from '../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const register = (
  register: Register,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<void>(
    {
      url: `/api/v1/auth/register`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: register,
      signal,
    },
    options
  );
};

export const getRegisterMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof register>>,
    TError,
    { data: Register },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: Register },
  TContext
> => {
  const mutationKey = ['register'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof register>>, { data: Register }> = (
    props
  ) => {
    const { data } = props ?? {};

    return register(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterMutationResult = NonNullable<Awaited<ReturnType<typeof register>>>;
export type RegisterMutationBody = Register;
export type RegisterMutationError = unknown;

export const useRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof register>>,
      TError,
      { data: Register },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof register>>,
  TError,
  { data: Register },
  TContext
> => {
  const mutationOptions = getRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const login = (
  login: Login,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<TokenResponse>(
    {
      url: `/api/v1/auth/login`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: login,
      signal,
    },
    options
  );
};

export const getLoginMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: Login },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError, { data: Login }, TContext> => {
  const mutationKey = ['login'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, { data: Login }> = (
    props
  ) => {
    const { data } = props ?? {};

    return login(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>;
export type LoginMutationBody = Login;
export type LoginMutationError = unknown;

export const useLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: Login },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof login>>, TError, { data: Login }, TContext> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const refresh = (
  refresh: Refresh,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<TokenResponse>(
    {
      url: `/api/v1/auth/refresh`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: refresh,
      signal,
    },
    options
  );
};

export const getRefreshMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refresh>>,
    TError,
    { data: Refresh },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refresh>>,
  TError,
  { data: Refresh },
  TContext
> => {
  const mutationKey = ['refresh'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof refresh>>, { data: Refresh }> = (
    props
  ) => {
    const { data } = props ?? {};

    return refresh(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshMutationResult = NonNullable<Awaited<ReturnType<typeof refresh>>>;
export type RefreshMutationBody = Refresh;
export type RefreshMutationError = unknown;

export const useRefresh = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refresh>>,
      TError,
      { data: Refresh },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<Awaited<ReturnType<typeof refresh>>, TError, { data: Refresh }, TContext> => {
  const mutationOptions = getRefreshMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Request a password reset. The user will receive an email with a link to the client app reset their password.
 */
export const requestPasswordReset = (
  requestPasswordReset: RequestPasswordReset,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<void>(
    {
      url: `/api/v1/auth/request-password-reset`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestPasswordReset,
      signal,
    },
    options
  );
};

export const getRequestPasswordResetMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof requestPasswordReset>>,
    TError,
    { data: RequestPasswordReset },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof requestPasswordReset>>,
  TError,
  { data: RequestPasswordReset },
  TContext
> => {
  const mutationKey = ['requestPasswordReset'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof requestPasswordReset>>,
    { data: RequestPasswordReset }
  > = (props) => {
    const { data } = props ?? {};

    return requestPasswordReset(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RequestPasswordResetMutationResult = NonNullable<
  Awaited<ReturnType<typeof requestPasswordReset>>
>;
export type RequestPasswordResetMutationBody = RequestPasswordReset;
export type RequestPasswordResetMutationError = unknown;

export const useRequestPasswordReset = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof requestPasswordReset>>,
      TError,
      { data: RequestPasswordReset },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof requestPasswordReset>>,
  TError,
  { data: RequestPasswordReset },
  TContext
> => {
  const mutationOptions = getRequestPasswordResetMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const resetPassword = (
  resetPassword: ResetPassword,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<void>(
    {
      url: `/api/v1/auth/reset-password`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: resetPassword,
      signal,
    },
    options
  );
};

export const getResetPasswordMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetPassword>>,
    TError,
    { data: ResetPassword },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: ResetPassword },
  TContext
> => {
  const mutationKey = ['resetPassword'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetPassword>>,
    { data: ResetPassword }
  > = (props) => {
    const { data } = props ?? {};

    return resetPassword(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof resetPassword>>>;
export type ResetPasswordMutationBody = ResetPassword;
export type ResetPasswordMutationError = unknown;

export const useResetPassword = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof resetPassword>>,
      TError,
      { data: ResetPassword },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof resetPassword>>,
  TError,
  { data: ResetPassword },
  TContext
> => {
  const mutationOptions = getResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
