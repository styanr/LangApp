/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * LangApp.Api
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { mainApiMutator } from '../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const redirectToClientApp = (
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<void>({ url: `/api/v1/client/deep-link`, method: 'GET', signal }, options);
};

export const getRedirectToClientAppQueryKey = () => {
  return [`/api/v1/client/deep-link`] as const;
};

export const getRedirectToClientAppInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof redirectToClientApp>>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRedirectToClientAppQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof redirectToClientApp>>> = ({ signal }) =>
    redirectToClientApp(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof redirectToClientApp>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RedirectToClientAppInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof redirectToClientApp>>
>;
export type RedirectToClientAppInfiniteQueryError = unknown;

export function useRedirectToClientAppInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof redirectToClientApp>>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectToClientApp>>,
          TError,
          Awaited<ReturnType<typeof redirectToClientApp>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRedirectToClientAppInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof redirectToClientApp>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectToClientApp>>,
          TError,
          Awaited<ReturnType<typeof redirectToClientApp>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRedirectToClientAppInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof redirectToClientApp>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useRedirectToClientAppInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof redirectToClientApp>>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getRedirectToClientAppInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getRedirectToClientAppQueryOptions = <
  TData = Awaited<ReturnType<typeof redirectToClientApp>>,
  TError = unknown,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>>;
  request?: SecondParameter<typeof mainApiMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getRedirectToClientAppQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof redirectToClientApp>>> = ({ signal }) =>
    redirectToClientApp(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof redirectToClientApp>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type RedirectToClientAppQueryResult = NonNullable<
  Awaited<ReturnType<typeof redirectToClientApp>>
>;
export type RedirectToClientAppQueryError = unknown;

export function useRedirectToClientApp<
  TData = Awaited<ReturnType<typeof redirectToClientApp>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectToClientApp>>,
          TError,
          Awaited<ReturnType<typeof redirectToClientApp>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRedirectToClientApp<
  TData = Awaited<ReturnType<typeof redirectToClientApp>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof redirectToClientApp>>,
          TError,
          Awaited<ReturnType<typeof redirectToClientApp>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useRedirectToClientApp<
  TData = Awaited<ReturnType<typeof redirectToClientApp>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useRedirectToClientApp<
  TData = Awaited<ReturnType<typeof redirectToClientApp>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof redirectToClientApp>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getRedirectToClientAppQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
