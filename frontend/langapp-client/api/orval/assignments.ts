/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * LangApp.Api
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AssignmentDto,
  AssignmentSlimDtoPagedResult,
  CreateAssignmentRequest,
  GetAssignmentsByGroupParams,
  GetAssignmentsByUserParams,
} from './langAppApi.schemas';

import { customAxiosMutator } from '../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getAssignment = (
  id: string,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<AssignmentDto>(
    { url: `/api/v1/assignments/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetAssignmentQueryKey = (id: string) => {
  return [`/api/v1/assignments/${id}`] as const;
};

export const getGetAssignmentInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAssignment>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAssignmentQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssignment>>> = ({ signal }) =>
    getAssignment(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetAssignmentInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAssignment>>
>;
export type GetAssignmentInfiniteQueryError = void;

export function useGetAssignmentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAssignment>>>,
  TError = void,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignment>>,
          TError,
          Awaited<ReturnType<typeof getAssignment>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAssignment>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignment>>,
          TError,
          Awaited<ReturnType<typeof getAssignment>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAssignment>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAssignmentInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAssignment>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAssignmentInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAssignmentQueryOptions = <
  TData = Awaited<ReturnType<typeof getAssignment>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAssignmentQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssignment>>> = ({ signal }) =>
    getAssignment(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAssignment>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAssignmentQueryResult = NonNullable<Awaited<ReturnType<typeof getAssignment>>>;
export type GetAssignmentQueryError = void;

export function useGetAssignment<TData = Awaited<ReturnType<typeof getAssignment>>, TError = void>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignment>>,
          TError,
          Awaited<ReturnType<typeof getAssignment>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignment<TData = Awaited<ReturnType<typeof getAssignment>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignment>>,
          TError,
          Awaited<ReturnType<typeof getAssignment>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignment<TData = Awaited<ReturnType<typeof getAssignment>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAssignment<TData = Awaited<ReturnType<typeof getAssignment>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getAssignment>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAssignmentQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createAssignment = (
  createAssignmentRequest: CreateAssignmentRequest,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<void>(
    {
      url: `/api/v1/assignments`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAssignmentRequest,
      signal,
    },
    options
  );
};

export const getCreateAssignmentMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAssignment>>,
    TError,
    { data: CreateAssignmentRequest },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAssignment>>,
  TError,
  { data: CreateAssignmentRequest },
  TContext
> => {
  const mutationKey = ['createAssignment'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAssignment>>,
    { data: CreateAssignmentRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createAssignment(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAssignmentMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAssignment>>
>;
export type CreateAssignmentMutationBody = CreateAssignmentRequest;
export type CreateAssignmentMutationError = unknown;

export const useCreateAssignment = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAssignment>>,
      TError,
      { data: CreateAssignmentRequest },
      TContext
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createAssignment>>,
  TError,
  { data: CreateAssignmentRequest },
  TContext
> => {
  const mutationOptions = getCreateAssignmentMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getAssignmentsByGroup = (
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<AssignmentSlimDtoPagedResult>(
    { url: `/api/v1/groups/${groupId}/assignments`, method: 'GET', params, signal },
    options
  );
};

export const getGetAssignmentsByGroupQueryKey = (
  groupId: string,
  params?: GetAssignmentsByGroupParams
) => {
  return [`/api/v1/groups/${groupId}/assignments`, ...(params ? [params] : [])] as const;
};

export const getGetAssignmentsByGroupInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    GetAssignmentsByGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        QueryKey,
        GetAssignmentsByGroupParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAssignmentsByGroupQueryKey(groupId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    QueryKey,
    GetAssignmentsByGroupParams['pageNumber']
  > = ({ signal, pageParam }) =>
    getAssignmentsByGroup(
      groupId,
      { ...params, pageNumber: pageParam || params?.['pageNumber'] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!groupId,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    QueryKey,
    GetAssignmentsByGroupParams['pageNumber']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAssignmentsByGroupInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAssignmentsByGroup>>
>;
export type GetAssignmentsByGroupInfiniteQueryError = void;

export function useGetAssignmentsByGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    GetAssignmentsByGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params: undefined | GetAssignmentsByGroupParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        QueryKey,
        GetAssignmentsByGroupParams['pageNumber']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByGroup>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByGroup>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    GetAssignmentsByGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        QueryKey,
        GetAssignmentsByGroupParams['pageNumber']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByGroup>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByGroup>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    GetAssignmentsByGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        QueryKey,
        GetAssignmentsByGroupParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAssignmentsByGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByGroup>>,
    GetAssignmentsByGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByGroup>>,
        QueryKey,
        GetAssignmentsByGroupParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAssignmentsByGroupInfiniteQueryOptions(groupId, params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAssignmentsByGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof getAssignmentsByGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAssignmentsByGroupQueryKey(groupId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssignmentsByGroup>>> = ({ signal }) =>
    getAssignmentsByGroup(groupId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!groupId,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByGroup>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetAssignmentsByGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAssignmentsByGroup>>
>;
export type GetAssignmentsByGroupQueryError = void;

export function useGetAssignmentsByGroup<
  TData = Awaited<ReturnType<typeof getAssignmentsByGroup>>,
  TError = void,
>(
  groupId: string,
  params: undefined | GetAssignmentsByGroupParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByGroup>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByGroup>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByGroup<
  TData = Awaited<ReturnType<typeof getAssignmentsByGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByGroup>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByGroup>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByGroup<
  TData = Awaited<ReturnType<typeof getAssignmentsByGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAssignmentsByGroup<
  TData = Awaited<ReturnType<typeof getAssignmentsByGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetAssignmentsByGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAssignmentsByGroupQueryOptions(groupId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAssignmentsByUser = (
  params: GetAssignmentsByUserParams,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<AssignmentSlimDtoPagedResult>(
    { url: `/api/v1/users/me/assignments`, method: 'GET', params, signal },
    options
  );
};

export const getGetAssignmentsByUserQueryKey = (params: GetAssignmentsByUserParams) => {
  return [`/api/v1/users/me/assignments`, ...(params ? [params] : [])] as const;
};

export const getGetAssignmentsByUserInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    GetAssignmentsByUserParams['pageNumber']
  >,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        QueryKey,
        GetAssignmentsByUserParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAssignmentsByUserQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    QueryKey,
    GetAssignmentsByUserParams['pageNumber']
  > = ({ signal, pageParam }) =>
    getAssignmentsByUser(
      { ...params, pageNumber: pageParam || params?.['pageNumber'] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    QueryKey,
    GetAssignmentsByUserParams['pageNumber']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAssignmentsByUserInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAssignmentsByUser>>
>;
export type GetAssignmentsByUserInfiniteQueryError = void;

export function useGetAssignmentsByUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    GetAssignmentsByUserParams['pageNumber']
  >,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        QueryKey,
        GetAssignmentsByUserParams['pageNumber']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByUser>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByUser>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    GetAssignmentsByUserParams['pageNumber']
  >,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        QueryKey,
        GetAssignmentsByUserParams['pageNumber']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByUser>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByUser>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    GetAssignmentsByUserParams['pageNumber']
  >,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        QueryKey,
        GetAssignmentsByUserParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAssignmentsByUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    GetAssignmentsByUserParams['pageNumber']
  >,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getAssignmentsByUser>>,
        QueryKey,
        GetAssignmentsByUserParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAssignmentsByUserInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAssignmentsByUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getAssignmentsByUser>>,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAssignmentsByUserQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAssignmentsByUser>>> = ({ signal }) =>
    getAssignmentsByUser(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAssignmentsByUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAssignmentsByUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAssignmentsByUser>>
>;
export type GetAssignmentsByUserQueryError = void;

export function useGetAssignmentsByUser<
  TData = Awaited<ReturnType<typeof getAssignmentsByUser>>,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByUser>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByUser<
  TData = Awaited<ReturnType<typeof getAssignmentsByUser>>,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAssignmentsByUser>>,
          TError,
          Awaited<ReturnType<typeof getAssignmentsByUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetAssignmentsByUser<
  TData = Awaited<ReturnType<typeof getAssignmentsByUser>>,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetAssignmentsByUser<
  TData = Awaited<ReturnType<typeof getAssignmentsByUser>>,
  TError = void,
>(
  params: GetAssignmentsByUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAssignmentsByUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetAssignmentsByUserQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
