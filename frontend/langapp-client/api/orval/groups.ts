/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * LangApp.Api
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateStudyGroupRequest,
  GetStudyGroupForUserParams,
  MembersBodyRequestModel,
  StudyGroupDto,
  StudyGroupInfoRequestModel,
  StudyGroupSlimDtoPagedResult,
} from './langAppApi.schemas';

import { customAxiosMutator } from '../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getStudyGroup = (
  id: string,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<StudyGroupDto>(
    { url: `/api/v1/groups/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetStudyGroupQueryKey = (id: string) => {
  return [`/api/v1/groups/${id}`] as const;
};

export const getGetStudyGroupInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getStudyGroup>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudyGroupQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudyGroup>>> = ({ signal }) =>
    getStudyGroup(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetStudyGroupInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStudyGroup>>
>;
export type GetStudyGroupInfiniteQueryError = void;

export function useGetStudyGroupInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getStudyGroup>>>,
  TError = void,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroup>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroupInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getStudyGroup>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroup>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroupInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getStudyGroup>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetStudyGroupInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getStudyGroup>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetStudyGroupInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetStudyGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof getStudyGroup>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudyGroupQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudyGroup>>> = ({ signal }) =>
    getStudyGroup(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStudyGroup>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetStudyGroupQueryResult = NonNullable<Awaited<ReturnType<typeof getStudyGroup>>>;
export type GetStudyGroupQueryError = void;

export function useGetStudyGroup<TData = Awaited<ReturnType<typeof getStudyGroup>>, TError = void>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroup>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroup<TData = Awaited<ReturnType<typeof getStudyGroup>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroup>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroup<TData = Awaited<ReturnType<typeof getStudyGroup>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetStudyGroup<TData = Awaited<ReturnType<typeof getStudyGroup>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudyGroup>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetStudyGroupQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateStudyGroupInfo = (
  id: string,
  studyGroupInfoRequestModel: StudyGroupInfoRequestModel,
  options?: SecondParameter<typeof customAxiosMutator>
) => {
  return customAxiosMutator<void>(
    {
      url: `/api/v1/groups/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: studyGroupInfoRequestModel,
    },
    options
  );
};

export const getUpdateStudyGroupInfoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateStudyGroupInfo>>,
    TError,
    { id: string; data: StudyGroupInfoRequestModel },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateStudyGroupInfo>>,
  TError,
  { id: string; data: StudyGroupInfoRequestModel },
  TContext
> => {
  const mutationKey = ['updateStudyGroupInfo'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateStudyGroupInfo>>,
    { id: string; data: StudyGroupInfoRequestModel }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateStudyGroupInfo(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateStudyGroupInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateStudyGroupInfo>>
>;
export type UpdateStudyGroupInfoMutationBody = StudyGroupInfoRequestModel;
export type UpdateStudyGroupInfoMutationError = unknown;

export const useUpdateStudyGroupInfo = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateStudyGroupInfo>>,
      TError,
      { id: string; data: StudyGroupInfoRequestModel },
      TContext
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateStudyGroupInfo>>,
  TError,
  { id: string; data: StudyGroupInfoRequestModel },
  TContext
> => {
  const mutationOptions = getUpdateStudyGroupInfoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const createStudyGroup = (
  createStudyGroupRequest: CreateStudyGroupRequest,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<void>(
    {
      url: `/api/v1/groups`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createStudyGroupRequest,
      signal,
    },
    options
  );
};

export const getCreateStudyGroupMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createStudyGroup>>,
    TError,
    { data: CreateStudyGroupRequest },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createStudyGroup>>,
  TError,
  { data: CreateStudyGroupRequest },
  TContext
> => {
  const mutationKey = ['createStudyGroup'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createStudyGroup>>,
    { data: CreateStudyGroupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createStudyGroup(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateStudyGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof createStudyGroup>>
>;
export type CreateStudyGroupMutationBody = CreateStudyGroupRequest;
export type CreateStudyGroupMutationError = unknown;

export const useCreateStudyGroup = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createStudyGroup>>,
      TError,
      { data: CreateStudyGroupRequest },
      TContext
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createStudyGroup>>,
  TError,
  { data: CreateStudyGroupRequest },
  TContext
> => {
  const mutationOptions = getCreateStudyGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const addMembersToStudyGroup = (
  id: string,
  membersBodyRequestModel: MembersBodyRequestModel,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<void>(
    {
      url: `/api/v1/groups/${id}/members`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: membersBodyRequestModel,
      signal,
    },
    options
  );
};

export const getAddMembersToStudyGroupMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addMembersToStudyGroup>>,
    TError,
    { id: string; data: MembersBodyRequestModel },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addMembersToStudyGroup>>,
  TError,
  { id: string; data: MembersBodyRequestModel },
  TContext
> => {
  const mutationKey = ['addMembersToStudyGroup'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addMembersToStudyGroup>>,
    { id: string; data: MembersBodyRequestModel }
  > = (props) => {
    const { id, data } = props ?? {};

    return addMembersToStudyGroup(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddMembersToStudyGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof addMembersToStudyGroup>>
>;
export type AddMembersToStudyGroupMutationBody = MembersBodyRequestModel;
export type AddMembersToStudyGroupMutationError = unknown;

export const useAddMembersToStudyGroup = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addMembersToStudyGroup>>,
      TError,
      { id: string; data: MembersBodyRequestModel },
      TContext
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof addMembersToStudyGroup>>,
  TError,
  { id: string; data: MembersBodyRequestModel },
  TContext
> => {
  const mutationOptions = getAddMembersToStudyGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const removeMembersFromStudyGroup = (
  id: string,
  membersBodyRequestModel: MembersBodyRequestModel,
  options?: SecondParameter<typeof customAxiosMutator>
) => {
  return customAxiosMutator<void>(
    {
      url: `/api/v1/groups/${id}/members`,
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      data: membersBodyRequestModel,
    },
    options
  );
};

export const getRemoveMembersFromStudyGroupMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeMembersFromStudyGroup>>,
    TError,
    { id: string; data: MembersBodyRequestModel },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeMembersFromStudyGroup>>,
  TError,
  { id: string; data: MembersBodyRequestModel },
  TContext
> => {
  const mutationKey = ['removeMembersFromStudyGroup'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeMembersFromStudyGroup>>,
    { id: string; data: MembersBodyRequestModel }
  > = (props) => {
    const { id, data } = props ?? {};

    return removeMembersFromStudyGroup(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveMembersFromStudyGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeMembersFromStudyGroup>>
>;
export type RemoveMembersFromStudyGroupMutationBody = MembersBodyRequestModel;
export type RemoveMembersFromStudyGroupMutationError = unknown;

export const useRemoveMembersFromStudyGroup = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof removeMembersFromStudyGroup>>,
      TError,
      { id: string; data: MembersBodyRequestModel },
      TContext
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof removeMembersFromStudyGroup>>,
  TError,
  { id: string; data: MembersBodyRequestModel },
  TContext
> => {
  const mutationOptions = getRemoveMembersFromStudyGroupMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getStudyGroupForUser = (
  params?: GetStudyGroupForUserParams,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<StudyGroupSlimDtoPagedResult>(
    { url: `/api/v1/users/me/groups`, method: 'GET', params, signal },
    options
  );
};

export const getGetStudyGroupForUserQueryKey = (params?: GetStudyGroupForUserParams) => {
  return [`/api/v1/users/me/groups`, ...(params ? [params] : [])] as const;
};

export const getGetStudyGroupForUserInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    GetStudyGroupForUserParams['pageNumber']
  >,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        QueryKey,
        GetStudyGroupForUserParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudyGroupForUserQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    QueryKey,
    GetStudyGroupForUserParams['pageNumber']
  > = ({ signal, pageParam }) =>
    getStudyGroupForUser(
      { ...params, pageNumber: pageParam || params?.['pageNumber'] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    QueryKey,
    GetStudyGroupForUserParams['pageNumber']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetStudyGroupForUserInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStudyGroupForUser>>
>;
export type GetStudyGroupForUserInfiniteQueryError = void;

export function useGetStudyGroupForUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    GetStudyGroupForUserParams['pageNumber']
  >,
  TError = void,
>(
  params: undefined | GetStudyGroupForUserParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        QueryKey,
        GetStudyGroupForUserParams['pageNumber']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroupForUser>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroupForUser>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroupForUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    GetStudyGroupForUserParams['pageNumber']
  >,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        QueryKey,
        GetStudyGroupForUserParams['pageNumber']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroupForUser>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroupForUser>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroupForUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    GetStudyGroupForUserParams['pageNumber']
  >,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        QueryKey,
        GetStudyGroupForUserParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetStudyGroupForUserInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    GetStudyGroupForUserParams['pageNumber']
  >,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getStudyGroupForUser>>,
        QueryKey,
        GetStudyGroupForUserParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetStudyGroupForUserInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetStudyGroupForUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getStudyGroupForUser>>,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStudyGroupForUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetStudyGroupForUserQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudyGroupForUser>>> = ({ signal }) =>
    getStudyGroupForUser(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getStudyGroupForUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetStudyGroupForUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getStudyGroupForUser>>
>;
export type GetStudyGroupForUserQueryError = void;

export function useGetStudyGroupForUser<
  TData = Awaited<ReturnType<typeof getStudyGroupForUser>>,
  TError = void,
>(
  params: undefined | GetStudyGroupForUserParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStudyGroupForUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroupForUser>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroupForUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroupForUser<
  TData = Awaited<ReturnType<typeof getStudyGroupForUser>>,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStudyGroupForUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudyGroupForUser>>,
          TError,
          Awaited<ReturnType<typeof getStudyGroupForUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetStudyGroupForUser<
  TData = Awaited<ReturnType<typeof getStudyGroupForUser>>,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStudyGroupForUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetStudyGroupForUser<
  TData = Awaited<ReturnType<typeof getStudyGroupForUser>>,
  TError = void,
>(
  params?: GetStudyGroupForUserParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getStudyGroupForUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetStudyGroupForUserQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
