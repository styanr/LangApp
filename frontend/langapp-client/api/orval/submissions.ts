/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * LangApp.Api
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  AssignmentSubmissionDto,
  AssignmentSubmissionDtoPagedResult,
  CreateAssignmentSubmissionRequest,
  EvaluatePronunciationSubmissionRequest,
  GetSubmissionsByAssignmentParams,
  GetSubmissionsByUserGroupParams,
  SubmissionGradeDto,
  UserGroupSubmissionDtoPagedResult,
} from './langAppApi.schemas';

import { mainApiMutator } from '../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getSubmission = (
  id: string,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<AssignmentSubmissionDto>(
    { url: `/api/v1/submissions/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetSubmissionQueryKey = (id: string) => {
  return [`/api/v1/submissions/${id}`] as const;
};

export const getGetSubmissionInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getSubmission>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubmissionQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubmission>>> = ({ signal }) =>
    getSubmission(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetSubmissionInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubmission>>
>;
export type GetSubmissionInfiniteQueryError = void;

export function useGetSubmissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubmission>>>,
  TError = void,
>(
  id: string,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmission>>,
          TError,
          Awaited<ReturnType<typeof getSubmission>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubmission>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmission>>,
          TError,
          Awaited<ReturnType<typeof getSubmission>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubmission>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSubmissionInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getSubmission>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubmissionInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetSubmissionQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubmission>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>>;
    request?: SecondParameter<typeof mainApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubmissionQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubmission>>> = ({ signal }) =>
    getSubmission(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubmission>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubmissionQueryResult = NonNullable<Awaited<ReturnType<typeof getSubmission>>>;
export type GetSubmissionQueryError = void;

export function useGetSubmission<TData = Awaited<ReturnType<typeof getSubmission>>, TError = void>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmission>>,
          TError,
          Awaited<ReturnType<typeof getSubmission>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmission<TData = Awaited<ReturnType<typeof getSubmission>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmission>>,
          TError,
          Awaited<ReturnType<typeof getSubmission>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmission<TData = Awaited<ReturnType<typeof getSubmission>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>>;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSubmission<TData = Awaited<ReturnType<typeof getSubmission>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getSubmission>>, TError, TData>>;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubmissionQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const editSubmissionGrade = (
  submissionId: string,
  activityId: string,
  submissionGradeDto: SubmissionGradeDto,
  options?: SecondParameter<typeof mainApiMutator>
) => {
  return mainApiMutator<void>(
    {
      url: `/api/v1/submissions/${submissionId}/activities/${activityId}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: submissionGradeDto,
    },
    options
  );
};

export const getEditSubmissionGradeMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof editSubmissionGrade>>,
    TError,
    { submissionId: string; activityId: string; data: SubmissionGradeDto },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof editSubmissionGrade>>,
  TError,
  { submissionId: string; activityId: string; data: SubmissionGradeDto },
  TContext
> => {
  const mutationKey = ['editSubmissionGrade'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof editSubmissionGrade>>,
    { submissionId: string; activityId: string; data: SubmissionGradeDto }
  > = (props) => {
    const { submissionId, activityId, data } = props ?? {};

    return editSubmissionGrade(submissionId, activityId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EditSubmissionGradeMutationResult = NonNullable<
  Awaited<ReturnType<typeof editSubmissionGrade>>
>;
export type EditSubmissionGradeMutationBody = SubmissionGradeDto;
export type EditSubmissionGradeMutationError = unknown;

export const useEditSubmissionGrade = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof editSubmissionGrade>>,
      TError,
      { submissionId: string; activityId: string; data: SubmissionGradeDto },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof editSubmissionGrade>>,
  TError,
  { submissionId: string; activityId: string; data: SubmissionGradeDto },
  TContext
> => {
  const mutationOptions = getEditSubmissionGradeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const createAssignmentSubmission = (
  assignmentId: string,
  createAssignmentSubmissionRequest: CreateAssignmentSubmissionRequest,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<void>(
    {
      url: `/api/v1/assignments/${assignmentId}/submissions`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: createAssignmentSubmissionRequest,
      signal,
    },
    options
  );
};

export const getCreateAssignmentSubmissionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAssignmentSubmission>>,
    TError,
    { assignmentId: string; data: CreateAssignmentSubmissionRequest },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAssignmentSubmission>>,
  TError,
  { assignmentId: string; data: CreateAssignmentSubmissionRequest },
  TContext
> => {
  const mutationKey = ['createAssignmentSubmission'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAssignmentSubmission>>,
    { assignmentId: string; data: CreateAssignmentSubmissionRequest }
  > = (props) => {
    const { assignmentId, data } = props ?? {};

    return createAssignmentSubmission(assignmentId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAssignmentSubmissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAssignmentSubmission>>
>;
export type CreateAssignmentSubmissionMutationBody = CreateAssignmentSubmissionRequest;
export type CreateAssignmentSubmissionMutationError = unknown;

export const useCreateAssignmentSubmission = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAssignmentSubmission>>,
      TError,
      { assignmentId: string; data: CreateAssignmentSubmissionRequest },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createAssignmentSubmission>>,
  TError,
  { assignmentId: string; data: CreateAssignmentSubmissionRequest },
  TContext
> => {
  const mutationOptions = getCreateAssignmentSubmissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getSubmissionsByAssignment = (
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<AssignmentSubmissionDtoPagedResult>(
    { url: `/api/v1/assignments/${assignmentId}/submissions`, method: 'GET', params, signal },
    options
  );
};

export const getGetSubmissionsByAssignmentQueryKey = (
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams
) => {
  return [`/api/v1/assignments/${assignmentId}/submissions`, ...(params ? [params] : [])] as const;
};

export const getGetSubmissionsByAssignmentInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    GetSubmissionsByAssignmentParams['pageNumber']
  >,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        QueryKey,
        GetSubmissionsByAssignmentParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSubmissionsByAssignmentQueryKey(assignmentId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    QueryKey,
    GetSubmissionsByAssignmentParams['pageNumber']
  > = ({ signal, pageParam }) =>
    getSubmissionsByAssignment(
      assignmentId,
      { ...params, pageNumber: pageParam || params?.['pageNumber'] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!assignmentId,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    QueryKey,
    GetSubmissionsByAssignmentParams['pageNumber']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubmissionsByAssignmentInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubmissionsByAssignment>>
>;
export type GetSubmissionsByAssignmentInfiniteQueryError = void;

export function useGetSubmissionsByAssignmentInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    GetSubmissionsByAssignmentParams['pageNumber']
  >,
  TError = void,
>(
  assignmentId: string,
  params: undefined | GetSubmissionsByAssignmentParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        QueryKey,
        GetSubmissionsByAssignmentParams['pageNumber']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByAssignmentInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    GetSubmissionsByAssignmentParams['pageNumber']
  >,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        QueryKey,
        GetSubmissionsByAssignmentParams['pageNumber']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByAssignmentInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    GetSubmissionsByAssignmentParams['pageNumber']
  >,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        QueryKey,
        GetSubmissionsByAssignmentParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSubmissionsByAssignmentInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
    GetSubmissionsByAssignmentParams['pageNumber']
  >,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
        QueryKey,
        GetSubmissionsByAssignmentParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubmissionsByAssignmentInfiniteQueryOptions(
    assignmentId,
    params,
    options
  );

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetSubmissionsByAssignmentQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByAssignment>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSubmissionsByAssignmentQueryKey(assignmentId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubmissionsByAssignment>>> = ({
    signal,
  }) => getSubmissionsByAssignment(assignmentId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!assignmentId,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByAssignment>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetSubmissionsByAssignmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubmissionsByAssignment>>
>;
export type GetSubmissionsByAssignmentQueryError = void;

export function useGetSubmissionsByAssignment<
  TData = Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
  TError = void,
>(
  assignmentId: string,
  params: undefined | GetSubmissionsByAssignmentParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByAssignment>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByAssignment<
  TData = Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByAssignment>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByAssignment>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByAssignment<
  TData = Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByAssignment>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSubmissionsByAssignment<
  TData = Awaited<ReturnType<typeof getSubmissionsByAssignment>>,
  TError = void,
>(
  assignmentId: string,
  params?: GetSubmissionsByAssignmentParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByAssignment>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubmissionsByAssignmentQueryOptions(assignmentId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSubmissionsByUserGroup = (
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<UserGroupSubmissionDtoPagedResult>(
    { url: `/api/v1/groups/${groupId}/submissions`, method: 'GET', params, signal },
    options
  );
};

export const getGetSubmissionsByUserGroupQueryKey = (
  groupId: string,
  params?: GetSubmissionsByUserGroupParams
) => {
  return [`/api/v1/groups/${groupId}/submissions`, ...(params ? [params] : [])] as const;
};

export const getGetSubmissionsByUserGroupInfiniteQueryOptions = <
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    GetSubmissionsByUserGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        QueryKey,
        GetSubmissionsByUserGroupParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubmissionsByUserGroupQueryKey(groupId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    QueryKey,
    GetSubmissionsByUserGroupParams['pageNumber']
  > = ({ signal, pageParam }) =>
    getSubmissionsByUserGroup(
      groupId,
      { ...params, pageNumber: pageParam || params?.['pageNumber'] },
      requestOptions,
      signal
    );

  return {
    queryKey,
    queryFn,
    enabled: !!groupId,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    TError,
    TData,
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    QueryKey,
    GetSubmissionsByUserGroupParams['pageNumber']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetSubmissionsByUserGroupInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubmissionsByUserGroup>>
>;
export type GetSubmissionsByUserGroupInfiniteQueryError = void;

export function useGetSubmissionsByUserGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    GetSubmissionsByUserGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params: undefined | GetSubmissionsByUserGroupParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        QueryKey,
        GetSubmissionsByUserGroupParams['pageNumber']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByUserGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    GetSubmissionsByUserGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        QueryKey,
        GetSubmissionsByUserGroupParams['pageNumber']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByUserGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    GetSubmissionsByUserGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        QueryKey,
        GetSubmissionsByUserGroupParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSubmissionsByUserGroupInfinite<
  TData = InfiniteData<
    Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
    GetSubmissionsByUserGroupParams['pageNumber']
  >,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        TError,
        TData,
        Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
        QueryKey,
        GetSubmissionsByUserGroupParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubmissionsByUserGroupInfiniteQueryOptions(groupId, params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetSubmissionsByUserGroupQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubmissionsByUserGroupQueryKey(groupId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>> = ({
    signal,
  }) => getSubmissionsByUserGroup(groupId, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!groupId,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetSubmissionsByUserGroupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubmissionsByUserGroup>>
>;
export type GetSubmissionsByUserGroupQueryError = void;

export function useGetSubmissionsByUserGroup<
  TData = Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
  TError = void,
>(
  groupId: string,
  params: undefined | GetSubmissionsByUserGroupParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByUserGroup<
  TData = Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
          TError,
          Awaited<ReturnType<typeof getSubmissionsByUserGroup>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetSubmissionsByUserGroup<
  TData = Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetSubmissionsByUserGroup<
  TData = Awaited<ReturnType<typeof getSubmissionsByUserGroup>>,
  TError = void,
>(
  groupId: string,
  params?: GetSubmissionsByUserGroupParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getSubmissionsByUserGroup>>, TError, TData>
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetSubmissionsByUserGroupQueryOptions(groupId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * This endpoint is used to evaluate pronunciation before actually submitting the assignment. It is used for receiving feedback to the student and giving them the opportunity to improve their pronunciation.
 */
export const evaluatePronunciationSubmission = (
  assignmentId: string,
  activityId: string,
  evaluatePronunciationSubmissionRequest: EvaluatePronunciationSubmissionRequest,
  options?: SecondParameter<typeof mainApiMutator>,
  signal?: AbortSignal
) => {
  return mainApiMutator<SubmissionGradeDto>(
    {
      url: `/api/v1/assignments/${assignmentId}/activities/${activityId}/evaluate-pronunciation`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: evaluatePronunciationSubmissionRequest,
      signal,
    },
    options
  );
};

export const getEvaluatePronunciationSubmissionMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof evaluatePronunciationSubmission>>,
    TError,
    { assignmentId: string; activityId: string; data: EvaluatePronunciationSubmissionRequest },
    TContext
  >;
  request?: SecondParameter<typeof mainApiMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof evaluatePronunciationSubmission>>,
  TError,
  { assignmentId: string; activityId: string; data: EvaluatePronunciationSubmissionRequest },
  TContext
> => {
  const mutationKey = ['evaluatePronunciationSubmission'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof evaluatePronunciationSubmission>>,
    { assignmentId: string; activityId: string; data: EvaluatePronunciationSubmissionRequest }
  > = (props) => {
    const { assignmentId, activityId, data } = props ?? {};

    return evaluatePronunciationSubmission(assignmentId, activityId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type EvaluatePronunciationSubmissionMutationResult = NonNullable<
  Awaited<ReturnType<typeof evaluatePronunciationSubmission>>
>;
export type EvaluatePronunciationSubmissionMutationBody = EvaluatePronunciationSubmissionRequest;
export type EvaluatePronunciationSubmissionMutationError = unknown;

export const useEvaluatePronunciationSubmission = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof evaluatePronunciationSubmission>>,
      TError,
      { assignmentId: string; activityId: string; data: EvaluatePronunciationSubmissionRequest },
      TContext
    >;
    request?: SecondParameter<typeof mainApiMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof evaluatePronunciationSubmission>>,
  TError,
  { assignmentId: string; activityId: string; data: EvaluatePronunciationSubmissionRequest },
  TContext
> => {
  const mutationOptions = getEvaluatePronunciationSubmissionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
