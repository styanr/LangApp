/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * LangApp.Api
 * OpenAPI spec version: 1.0
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  SearchUsersParams,
  UpdateUserInfoRequest,
  UserDto,
  UserDtoPagedResult,
} from './langAppApi.schemas';

import { customAxiosMutator } from '../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getUser = (
  id: string,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<UserDto>(
    { url: `/api/v1/users/${id}`, method: 'GET', signal },
    options
  );
};

export const getGetUserQueryKey = (id: string) => {
  return [`/api/v1/users/${id}`] as const;
};

export const getGetUserInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) =>
    getUser(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetUserInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>;
export type GetUserInfiniteQueryError = void;

export function useGetUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>,
  TError = void,
>(
  id: string,
  options: {
    query: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getUser>>>,
  TError = void,
>(
  id: string,
  options?: {
    query?: Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUserQueryOptions = <TData = Awaited<ReturnType<typeof getUser>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) =>
    getUser(id, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!id, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>;
export type GetUserQueryError = void;

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = void>(
  id: string,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUser>>,
          TError,
          Awaited<ReturnType<typeof getUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetUser<TData = Awaited<ReturnType<typeof getUser>>, TError = void>(
  id: string,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetUserQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const searchUsers = (
  params: SearchUsersParams,
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<UserDtoPagedResult>(
    { url: `/api/v1/users`, method: 'GET', params, signal },
    options
  );
};

export const getSearchUsersQueryKey = (params: SearchUsersParams) => {
  return [`/api/v1/users`, ...(params ? [params] : [])] as const;
};

export const getSearchUsersInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof searchUsers>>, SearchUsersParams['pageNumber']>,
  TError = void,
>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchUsers>>,
        QueryKey,
        SearchUsersParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchUsersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof searchUsers>>,
    QueryKey,
    SearchUsersParams['pageNumber']
  > = ({ signal, pageParam }) =>
    searchUsers(
      { ...params, pageNumber: pageParam || params?.['pageNumber'] },
      requestOptions,
      signal
    );

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof searchUsers>>,
    TError,
    TData,
    Awaited<ReturnType<typeof searchUsers>>,
    QueryKey,
    SearchUsersParams['pageNumber']
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchUsers>>>;
export type SearchUsersInfiniteQueryError = void;

export function useSearchUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchUsers>>, SearchUsersParams['pageNumber']>,
  TError = void,
>(
  params: SearchUsersParams,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchUsers>>,
        QueryKey,
        SearchUsersParams['pageNumber']
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUsers>>,
          TError,
          Awaited<ReturnType<typeof searchUsers>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSearchUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchUsers>>, SearchUsersParams['pageNumber']>,
  TError = void,
>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchUsers>>,
        QueryKey,
        SearchUsersParams['pageNumber']
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUsers>>,
          TError,
          Awaited<ReturnType<typeof searchUsers>>,
          QueryKey
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSearchUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchUsers>>, SearchUsersParams['pageNumber']>,
  TError = void,
>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchUsers>>,
        QueryKey,
        SearchUsersParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSearchUsersInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof searchUsers>>, SearchUsersParams['pageNumber']>,
  TError = void,
>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof searchUsers>>,
        TError,
        TData,
        Awaited<ReturnType<typeof searchUsers>>,
        QueryKey,
        SearchUsersParams['pageNumber']
      >
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSearchUsersInfiniteQueryOptions(params, options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getSearchUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof searchUsers>>,
  TError = void,
>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchUsersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchUsers>>> = ({ signal }) =>
    searchUsers(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchUsers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchUsersQueryResult = NonNullable<Awaited<ReturnType<typeof searchUsers>>>;
export type SearchUsersQueryError = void;

export function useSearchUsers<TData = Awaited<ReturnType<typeof searchUsers>>, TError = void>(
  params: SearchUsersParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUsers>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUsers>>,
          TError,
          Awaited<ReturnType<typeof searchUsers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSearchUsers<TData = Awaited<ReturnType<typeof searchUsers>>, TError = void>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUsers>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchUsers>>,
          TError,
          Awaited<ReturnType<typeof searchUsers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useSearchUsers<TData = Awaited<ReturnType<typeof searchUsers>>, TError = void>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useSearchUsers<TData = Awaited<ReturnType<typeof searchUsers>>, TError = void>(
  params: SearchUsersParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof searchUsers>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getSearchUsersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getCurrentUser = (
  options?: SecondParameter<typeof customAxiosMutator>,
  signal?: AbortSignal
) => {
  return customAxiosMutator<UserDto>({ url: `/api/v1/users/me`, method: 'GET', signal }, options);
};

export const getGetCurrentUserQueryKey = () => {
  return [`/api/v1/users/me`] as const;
};

export const getGetCurrentUserInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUser>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
    getCurrentUser(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUser>>
>;
export type GetCurrentUserInfiniteQueryError = void;

export function useGetCurrentUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUser>>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUser>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUser>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetCurrentUserInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCurrentUser>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCurrentUserInfiniteQueryOptions(options);

  const query = useInfiniteQuery(queryOptions, queryClient) as UseInfiniteQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
  request?: SecondParameter<typeof customAxiosMutator>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({ signal }) =>
    getCurrentUser(requestOptions, signal);

  return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUser>>>;
export type GetCurrentUserQueryError = void;

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void,
>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = void,
>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>>;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateUserInfo = (
  updateUserInfoRequest: UpdateUserInfoRequest,
  options?: SecondParameter<typeof customAxiosMutator>
) => {
  return customAxiosMutator<void>(
    {
      url: `/api/v1/users/me`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: updateUserInfoRequest,
    },
    options
  );
};

export const getUpdateUserInfoMutationOptions = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserInfo>>,
    TError,
    { data: UpdateUserInfoRequest },
    TContext
  >;
  request?: SecondParameter<typeof customAxiosMutator>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserInfo>>,
  TError,
  { data: UpdateUserInfoRequest },
  TContext
> => {
  const mutationKey = ['updateUserInfo'];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserInfo>>,
    { data: UpdateUserInfoRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserInfo(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserInfoMutationResult = NonNullable<Awaited<ReturnType<typeof updateUserInfo>>>;
export type UpdateUserInfoMutationBody = UpdateUserInfoRequest;
export type UpdateUserInfoMutationError = unknown;

export const useUpdateUserInfo = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserInfo>>,
      TError,
      { data: UpdateUserInfoRequest },
      TContext
    >;
    request?: SecondParameter<typeof customAxiosMutator>;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserInfo>>,
  TError,
  { data: UpdateUserInfoRequest },
  TContext
> => {
  const mutationOptions = getUpdateUserInfoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
