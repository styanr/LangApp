/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * OpenAPI Document on Azure Functions
 * This is the OpenAPI Document on Azure Functions
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  GetReadSasUriParams,
  ReadSasResponseModel,
} from './openAPIDocumentOnAzureFunctions.schemas';

import { functionsApiMutator } from '../../axiosMutator';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

export const getReadSasUri = (
  params: GetReadSasUriParams,
  options?: SecondParameter<typeof functionsApiMutator>,
  signal?: AbortSignal
) => {
  return functionsApiMutator<ReadSasResponseModel>(
    { url: `/GetReadSasUri`, method: 'GET', params, signal },
    options
  );
};

export const getGetReadSasUriQueryKey = (params: GetReadSasUriParams) => {
  return [`/GetReadSasUri`, ...(params ? [params] : [])] as const;
};

export const getGetReadSasUriQueryOptions = <
  TData = Awaited<ReturnType<typeof getReadSasUri>>,
  TError = string,
>(
  params: GetReadSasUriParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReadSasUri>>, TError, TData>>;
    request?: SecondParameter<typeof functionsApiMutator>;
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetReadSasUriQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReadSasUri>>> = ({ signal }) =>
    getReadSasUri(params, requestOptions, signal);

  return { queryKey, queryFn, staleTime: 1500000, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReadSasUri>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReadSasUriQueryResult = NonNullable<Awaited<ReturnType<typeof getReadSasUri>>>;
export type GetReadSasUriQueryError = string;

export function useGetReadSasUri<
  TData = Awaited<ReturnType<typeof getReadSasUri>>,
  TError = string,
>(
  params: GetReadSasUriParams,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReadSasUri>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReadSasUri>>,
          TError,
          Awaited<ReturnType<typeof getReadSasUri>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof functionsApiMutator>;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReadSasUri<
  TData = Awaited<ReturnType<typeof getReadSasUri>>,
  TError = string,
>(
  params: GetReadSasUriParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReadSasUri>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReadSasUri>>,
          TError,
          Awaited<ReturnType<typeof getReadSasUri>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof functionsApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };
export function useGetReadSasUri<
  TData = Awaited<ReturnType<typeof getReadSasUri>>,
  TError = string,
>(
  params: GetReadSasUriParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReadSasUri>>, TError, TData>>;
    request?: SecondParameter<typeof functionsApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

export function useGetReadSasUri<
  TData = Awaited<ReturnType<typeof getReadSasUri>>,
  TError = string,
>(
  params: GetReadSasUriParams,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getReadSasUri>>, TError, TData>>;
    request?: SecondParameter<typeof functionsApiMutator>;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetReadSasUriQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
