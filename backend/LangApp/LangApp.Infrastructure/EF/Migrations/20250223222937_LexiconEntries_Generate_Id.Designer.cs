// <auto-generated />
using System;
using LangApp.Infrastructure.EF.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LangApp.Infrastructure.EF.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20250223222937_LexiconEntries_Generate_Id")]
    partial class LexiconEntries_Generate_Id
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("application")
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconEntryDefinitionReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("LexiconEntryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LexiconEntryId");

                    b.ToTable("LexiconEntryDefinitions", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconEntryReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LexiconId")
                        .HasColumnType("uuid");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LexiconId");

                    b.ToTable("LexiconEntries", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Lexicons", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Posts.PostReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<string[]>("Media")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GroupId");

                    b.ToTable("Posts", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.StudyGroups.MemberReadModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("Members", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.StudyGroups.StudyGroupReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("StudyGroups", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Users.UserReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("ApplicationUsers", "application");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconEntryDefinitionReadModel", b =>
                {
                    b.HasOne("LangApp.Infrastructure.EF.Models.Lexicons.LexiconEntryReadModel", "Entry")
                        .WithMany("Definitions")
                        .HasForeignKey("LexiconEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconEntryReadModel", b =>
                {
                    b.HasOne("LangApp.Infrastructure.EF.Models.Lexicons.LexiconReadModel", "Lexicon")
                        .WithMany("Entries")
                        .HasForeignKey("LexiconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lexicon");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconReadModel", b =>
                {
                    b.HasOne("LangApp.Infrastructure.EF.Models.Users.UserReadModel", "Owner")
                        .WithMany("Lexicons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Posts.PostReadModel", b =>
                {
                    b.HasOne("LangApp.Infrastructure.EF.Models.Users.UserReadModel", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangApp.Infrastructure.EF.Models.StudyGroups.StudyGroupReadModel", "Group")
                        .WithMany("Posts")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.StudyGroups.MemberReadModel", b =>
                {
                    b.HasOne("LangApp.Infrastructure.EF.Models.StudyGroups.StudyGroupReadModel", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LangApp.Infrastructure.EF.Models.Users.UserReadModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.StudyGroups.StudyGroupReadModel", b =>
                {
                    b.HasOne("LangApp.Infrastructure.EF.Models.Users.UserReadModel", "Owner")
                        .WithMany("ManagedGroups")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconEntryReadModel", b =>
                {
                    b.Navigation("Definitions");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Lexicons.LexiconReadModel", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.StudyGroups.StudyGroupReadModel", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("LangApp.Infrastructure.EF.Models.Users.UserReadModel", b =>
                {
                    b.Navigation("Lexicons");

                    b.Navigation("ManagedGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
